// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {
    string public name;
    address public owner;

    mapping(address => uint256) private balances;


    constructor(string memory _name) {
        name = _name;
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(balances[msg.sender] >= amount, "Insufficient balance");

        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        return true;
    }

    function mint(address account, uint256 amount) public onlyOwner {
        balances[account] += amount;
    }

    function burn(address account, uint256 amount) public {
        require(balances[account] >= amount, "Insufficient balance to burn");

        balances[account] -= amount;
    }
}
